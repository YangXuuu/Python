###
Ctrl + l 清空屏幕

GENCODE is a consortium that creates data on transcripts and genes.
右击复制数据路径
$ mkdir GENCODE
$ cd GENCODE
$ wget + 复制的路径 (download as a gzip file - xxx.fa.gz)
$ gunzip xxx.fa.gz (变成fa文件)
$ python
>>> from Bio import SeqIO
### parse takes two arguments, file + format
### this step establishes a connection between the file system and python code
>>> sequences = SeqIO.parse('xxx.fa','fasta')
>>> for record in sequences:
        examples = record
        break 
### 结果：class 'Bio.SeqRecord.SeqRecord'
>>> type(example)
### 将 ID, name, description等信息按列列出
>>> print(example)
### 直接输出id，以string形式
>>> example.id
>>> CDS = example.seq[60:1041]
>>> CDS
>>> print(CDS)
### 输出翻译后的蛋白质序列
>>> CDS.translate()
>>>
>>>
>>> quit()
### 统计个数？
$ grep ">" xxx.fa | wc
### 
>>> L = []
>>> for record in sequences:
...     L.append(record)
>>> len(L)


1. Creating a sequence
To create your own sequence, you can use the bio python Seq object.
>>> from Bio.Seq import Seq
>>> my_sequence = Seq("ATGC")
>>> print("The sequence is", my_sequence)
$ The sequence is ATGC
>>> print("The length of the sequence is", len(my_sequence))
$ The length of the sequence is 13

2. Get the reverse complement of a sequence
You can easily get the reverse complements of a sequence using a single function call reverse_complement().
>>> print("The reverse complement of the sequence is", my_sequence.reverse_complement())
$ The reverse complement of the sequence is TACG

3. Count the number of occurrences of a nucleotide
You can get the number of occurrence of a particular nucleotide using the count() function.
>>> print("The number of As in the sequence", my_sequence.count("A"))
$ The number of As in the sequence 3

4. Find the starting index of a subsequence
You can find the starting index of a subsequence using the find() function.
>>> print("Found TTG in the sequence at index", my_sequence.find("TTG"))
$ Found TTG in the sequence at index 6

5. Reading a sequence file
Biopython's SeqIO (Sequence Input/Output) interface can be used to read sequence files. The parse() function takes a file (with a file handle and format) and returns a SeqRecord iterator. Following is an example of how to read a FASTA file.
>>> from Bio import SeqIO
>>> for record in SeqIO.parse("example.fasta", "fasta"):
       print(record.id)

record.id will return the identifier of the sequence. record.seq will return the sequence itself. record.description will return the sequence description. 

6. Writing sequences to a file
Biopython's SeqIO interface can be used to write sequences to files. Following is an example where a list of sequences are written to a FASTA file.
>>> from Bio import SeqIO
>>> from Bio.SeqRecord import SeqRecord
>>> from Bio.Alphabet import generic_dna
>>> sequences = ["AAACGTGG", "TGAACCG", "GGTGCA", "CCAATGCG"]
>>> records = (SeqRecord(Seq(seq, generic_dna), str(index)) for index, seq in enumerate(sequences))
>>> with open("example.fasta", "w") as output_handle:
>>>    SeqIO.write(records, output_handle, "fasta")

This code will result in a FASTA file with sequence ids starting from 0. If you want to give a custom id and a description you can create the records as follows.
>>> sequences = ["AAACGTGG", "TGAACCG", "GGTGCA", "CCAATGCG"]
>>> new_sequences = []
>>> i=1
>>> for sequence in sequences:
       record = SeqRecord(sequence, id="Seq_"+str(i), name="Seq_"+str(i), description="<custom description>")
       new_sequences.append(record)
    with open("example.fasta", "w") as output_handle:
       SeqIO.write(new_sequences, output_handle, "fasta")

The SeqIO.write() function will return the number of sequences written.

7. Convert a FASTQ file to FASTA file
We need to convert DNA data file formats in certain applications. For example, we can do file format conversions from FASTQ to FASTA as follows.
>>> from Bio import SeqIO
>>> with open("path/tofastq/file.fastq", "r") as input_handle, open("path/to/fasta/file.fasta", "w") as output_handle:
>>>    sequences = SeqIO.parse(input_handle, "fastq")
>>>    count = SeqIO.write(sequences, output_handle, "fasta")
>>>    print("Converted %i records" % count)

If you want to convert a GenBank file to FASTA format,
>>> from Bio import SeqIO
>>> with open("path/to/genbank/file.gb", "rU") as input_handle, open("path/to/fasta/file.fasta", "w") as output_handle:
>>>    sequences = SeqIO.parse(input_handle, "genbank")
>>>    count = SeqIO.write(sequences, output_handle, "fasta")
>>>    print("Converted %i records" % count)

8. Separate sequences by ids from a list of ids
Assume that you have a list of sequence identifiers in a file named list.lst where you want to separate the corresponding sequences from a FASTA file. You can run the following and write those sequences to a file.
>>> from Bio import SeqIO
>>> ids = set(x[:-1] for x in open(path+"list.lst"))
>>> with open(path+'list.fq', mode='a') as my_output:
>>>    for seq in SeqIO.parse(path+"list_sequences.fq", "fastq"):
>>>       if seq.id in ids:
>>>          my_output.write(seq.format("fastq"))










Biopython Handbook
5.6 Low level FASTA and FASTQ parsers
Working with the low-level SimpleFastaParser or FastqGeneralIterator is often more practical than Bio.SeqIO.parse when dealing with large high-throughout FASTA or FASTQ sequencing files where speed matters. As noted in the introduction to this chapter, the file-format neutral Bio.SeqIO interface has the overhead of creating many objects even for simple formats like FASTA.

When parsing FASTA files, internally Bio.SeqIO.parse() calls the low-level SimpleFastaParser with the file handle. You can use this directly - it iterates over the file handle returning each record as a tuple of two strings, the title line (everything after the > character) and the sequence (as a plain string):
>>> from Bio.SeqIO.FastaIO import SimpleFastaParser
>>> count = 0
>>> total_len = 0
>>> with open("ls_orchid.fasta") as in_handle:
...    for title, seq in SimpleFastaParser(in_handle):
...       count +=1
...       total_len += len(seq)
...
>>> print("%I records with total sequence length %i" % (count, total_len))
$ 94 records with total sequence length 67518

As long as you don't care about line wrapping (and you probably don't for short read high-throughput data), then outputting FASTA format from these strings is also very fast.
...
out_handle.write(">%s\n%s\n" % (title, seq))
...

Likewise, when parsing FASTQ files, internally Bio.SeqIO.parse() calls the low-level FastqGeneralIterator with the file handle. If you don't need the quality scores turned into integers, or can work with them as ASCII strings this is ideal:
>>> from Bio.SeqIO.QualityIO import FastqGeneralIterator
>>> count = 0
>>> total_len = 0
>>> with open("example.fastq") as in_handle:
...     for title, seq, qual in FastqGeneralIterator(in_handle):
...         count += 1
...         total_len += len(seq)
...
>>> print("%i records with total sequence length %i" % (count, total_len))
3 records with total sequence length 75
There are more examples of this in the Cookbook (Chapter ‍20), including how to output FASTQ efficiently from strings using this code snippet:

...
out_handle.write("@%s\n%s\n+\n%s\n" % (title, seq, qual))
...
