### list中list的基本操作
>>> grades = [[10,25,13,45],[205],[70,76,49,100]]
>>> print(grades[0])
$ [10,25,13,45]
>>> print(grades[2][1])
$ 76
>>> grades[1].append(70)
>>> print(grades)
$ [[10,25,13,45],[205,70],[70,76,49,100]]
>>> for inner_list in grades:
         print(inner_list)
### each time one of the list is printed
$ [10,25,13,45]
$ [205,70]
$ [70,76,49,100]
>>> for inner_list in grades:
>>>    for grade in inner_list:
>>>        print(grade, end=" ")
$ 10 25 13 45 205 70 70 76 49 100           
### 上述代码也可写成
>>> for i in range(len(grades)):
>>>    for j in range(len(grades[i])):
>>>        print(grades[I][j], end=" ")
### 在这两个loop下多打一行print()可将他们分成数行

### 将list中的str字符全都转换成int及其map的用法
>>> ls = ['1','2','3','4','5']
>>> li = list(map(int,ls))
>>> print(li)
$ [1,2,3,4,5]
### 方法二
>>> li = [int(i) for I in ls]
### 方法三 - 循环
>>> new_list = []
>>> for n in ls:
>>>    new_list.append(int(n))
### 方法四 - 不太懂
>>> for I, v in enumerate(ls): ls[i] = int(v)

###Python使用reduce()函数计算多个集合的并集与交集
###键是标准库functools中reduce()函数的用法，当然其中的函数intersect和union可以使用lambda表达式进行替换
>>> from functools import reduce
>>> def intersect(x,y):
...    return x&y
>>> sets = [{1,2,3,4,5},{3,2,5,8}]
>>> result = reduce(intersect, sets)
>>> result
>>> {2,5}
>>> def union(x,y):
...    return x|y

### 函数的return语句只能返回一个值，可以是任何类型；因此我们可以返回一个tuple类型，来间接达到返回多个值
例：x处以y的余数与商的函数
>>> def F1(x,y):
...    a=x%y
...    b=(x-a)/y
...    return(a,b) 
